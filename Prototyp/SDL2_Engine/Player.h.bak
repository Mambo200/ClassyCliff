#pragma once

#pragma region system include
#include <list>
#pragma endregion

#pragma region project include
#include "MoveObject.h"
#include "Macro.h"
#include "Renderer.h"
#include "Engine.h"
#pragma endregion

#pragma region using
using namespace std;
#pragma endregion

/// <summary>
/// player class
/// </summary>
class GPlayer :	public CMoveObject
{
public:
#pragma region constructor
	/// <summary>
	/// constructor
	/// </summary>
	/// <param name="_pos">position of object</param>
	GPlayer(SVector2 _pos) : CMoveObject(_pos) 
	{		
		CEngine::Get()->GetRenderer()->SetCamera(
			SVector2(savedXPos, m_position.Y - PLAYER_HEIGHT * 2) // Changed xPosition
		);
	}

	/// <summary>
	/// constructor
	/// </summary>
	/// <param name="_pos">position of object</param>
	/// <param name="_size">width and height of rect</param>
	GPlayer(SVector2 _pos, SVector2 _size) : CMoveObject(_pos, _size) {}

	/// <summary>
	/// constructor
	/// </summary>
	/// <param name="_pos">position of object</param>
	/// <param name="_size">width and height of rect</param>
	/// <param name="_pRenderer">renderer</param>
	/// <param name="_pFileName">file path name (relative)</param>
	GPlayer(SVector2 _pos, SVector2 _size, CRenderer* _pRenderer,
		const char* _pFileName) : CMoveObject(_pos, _size, _pRenderer, _pFileName) {}

	/// <summary>
	/// destructor
	/// </summary>
	~GPlayer() {}
#pragma endregion

#pragma region public override function
	/// <summary>
	/// update every frame
	/// </summary>
	/// <param name="_deltaTime">time since last frame</param>
	void Update(float _deltaTime) override;

	/// <summary>
	/// render every frame
	/// </summary>
	/// <param name="_pRenderer"></param>
	void Render(CRenderer* _pRenderer) override;
#pragma endregion

private:
#pragma region private function
	/// <summary>
	/// add bullet time on screen to list
	/// </summary>
	/// <param name="_pTime">time</param>
	//void AddBulletTime() { AddTime(BULLET_TIME_ON_SCREEN, *bulletTimeOnScreen); }

	/// <summary>
	/// set shoot time
	/// </summary>
	/// <param name="_pTime">time</param>
	void SetShootTime() { shootTime = BULLET_TIME_ON_SCREEN; }

	/// <summary>
	/// lowers the shoot time
	/// </summary>
	/// <param name="_deltaTime">deltatime</param>
	void LowerShootTime(float _deltaTime);

	/// <summary>
	/// lowers bullet time
	/// </summary>
	/// <param name="_deltaTime">deltatime</param>
	void LowerBulletTime(float _deltaTime);

	/// <summary>
	/// time object to array
	/// </summary>
	/// <param name="_pObj">time</param>
	/// <param name="_pList">array to add to</param>
	void AddTime();

	void RemoveTime(list<float> &_pList);

	/// <summary>
	/// check if numbers of array == 0
	/// </summary>
	/// <param name="_bulletTimeOnScreen1">first array</param>
	/// <param name="_bulletTimeOnScreen2">second array</param>
	/// <returns></returns>
	short CheckArraySize();
#pragma endregion

#pragma region private primitive variable
	/// <summary>
	/// is jump active
	/// </summary>
	bool m_jump;

	/// <summary>
	/// time till jump ends
	/// </summary>
	float m_jumpTime;

	/// <summary>
	/// save first x position of camera
	/// </summary>
	float savedXPos;

	/// <summary>
	/// x position of camera saved --> true
	/// </summary>
	bool saved = false;

	/// <summary>
	/// if collided --> true
	/// </summary>
	bool collided = false;

	/// <summary>
	/// save next position
	/// </summary>
	SVector2 nextPos = SVector2(0,0);

	/// <summary>
	/// time bullet is on screen
	/// </summary>
	float bulletTimeOnScreen [2];

	/// <summary>
	/// time a bullet can be shot
	/// </summary>
	float shootTime;

	/// <summary>
	/// if bullet is shot
	/// </summary>
	bool shot = false;
#pragma endregion
};